Assignment 3
Due date: March 8, 2018 at 23:30
Weight: 15% of the final grade.
Note: This is an individual assignment. Group work is NOT allowed.


As a starting point for this assignment you can follow the tutorial posted at:

http://socket.io/get-started/chat/

The above tutorial and the corresponding source code implements only very limited chat functionality. 
For this assignment you are asked to implement additional functionality, as described below.

You do not have to use websockets to implement this assignment. However, I strongly recommend you do use websockets in combination with socket.io. 
Also, you may use any external JavaScript libraries for this assignment.

Requirements
All requirements below have the same weight, but not all are equally easy to implement. Please plan accordingly.

Presentation: / 10 points
Your application should look attractive.

If the browser is resized, your application should resize as well (ie. basic responsive design).

You are free to implement more sophisticated responsive web design features, as described here: 
	
	https://developers.google.com/web/fundamentals/design-and-ui/responsive/

Time stamps: / 10 points

	All chat messages should be displayed with a timestamp indicating when the message was sent.
	The timestamp should be calculated by the server, and nicely formatted by the client.

Nicknames: / 10 points

	When a user navigates to the web application, the user should be assigned a unique nickname. 
	This nickname should be generated by the server. The nickname should be somehow indicated to the user, 
	for example by being displayed at the top of the page as suggested in the proposed layout.

	When the user types in a message, the message should be shown to everyone with the user's nickname.

Scroll-up text: / 10 points

	The chat log should be aligned at the bottom.

	The chat log should have a vertical scroll bar.

Chat log history: / 10 points

	The server should remember at least the last 200 messages. It is ok to store this history in memory rather than persisting it on disk.

	When a user connects to the system, the entire chat log should be displayed to the user.

Display current users: / 10 points

	The app should display all currently connected users.

	When a new user joins or an existing user disconnects, this list should be updated.

Change nickname: / 10 points

	Users should be able to change their nickname by typing a special command into the textbox: 
	/nick <new nickname>

	This command should be refused if the new nickname is not unique.

	After successful nickname change the list of currently logged in users should be updated for all users.

Nick color: / 10 points

	Users should be able to change the color of their nickname using a command:
	/nickcolor RRGGBB

	Once the color has been changed, all subsequent messages from that user should be displayed with the new colored nickname.

Bold messages: / 10 points

	Messages posted by the user should be bolded in the chat log (or otherwise stylized).

Cookies: / 10 points

	If the user gets disconnected and then the user reconnects again, the user should be assigned the same nickname. You can use browser cookies for this purpose.

	You may find it easier to work with cookies using client-side JavaScript. Some information regarding this is available here:
	https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie 

Additional requirements:

	Your chat application must support at least 5 concurrent users.
	Your implementation must work at least in Google Chrome and Mozilla Firefox browsers.
	Your implementation must use node.js on the server side, and it must work on the Linux machines in the labs on the main floor of MS.
	Your entire source code must be posted on Github in a public repository. Please do not put the course number "SENG513" anywhere in the title of the respository.
	You are required to demo your chat application to your TA during lab time. Your TA will arrange the demo time.

Submit a single ZIP file containing:

	all source files for your application
	readme.pdf file, containing:

		your name and UCID;
		link to the GitHub repository containing your code;

	any special instructions on how to run the code on the Linux machines in the lab.
